/**************************************************************************************************/
/**                             AUTO-GENERATED FILE. DO NOT MODIFY!                              **/
/**************************************************************************************************/
#pragma once
#include "../../../common.h"

namespace lmcu::device::ip::v1 {

// ------------------------------------------------------------------------------------------------
// TRNG Register Map
// ------------------------------------------------------------------------------------------------
template<std::uintptr_t base>
struct TRNG
{
  static constexpr auto ip_ver = ip_version::_1;

  // TRNG Control Register and Status
  struct CTL : reg<ip_ver, base + 0x0>
  {
    static constexpr typename CTL::type
    // Random Number Generator Enable Bit This bit can be set to 1 only after ACT (TRNG_ACT[7]) bit is set to 1 and READY (TRNG_CTL[7]) bit became 1. Note: TRNGEN is an enable bit of digital part. When TRNG is not required to generate random number, TRNGEN bit and ACT (TRNG_ACT[7]) bit should be set to 0 to reduce power consumption. (bits: 0)
     TRNGEN_MASK = 0x00000001
    ,TRNGEN_POS = 0
    ,TRNGEN_0 = 0x00000000 // TRNG Disabled
    ,TRNGEN_1 = 0x00000001 // TRNG Enabled
    // Data Valid (Read Only) Note: This bit is cleared to '0' by reading TRNG_DATA. (bits: 1)
    ,DVIF_MASK = 0x00000002
    ,DVIF_POS = 1
    ,DVIF_0 = 0x00000000 // Data is not valid. Reading from RNGD returns 0x00000000
    ,DVIF_1 = 0x00000002 // Data is valid. A valid random number can be read form DATA(TRNG_DATA[7:0])
    // Clock Prescaler The CLKPSC is the peripheral clock frequency range for the selected value , the CLKPSC setting must be higher than or equal to the actual peripheral clock frequency (for correct random bit generation). To change the CLKPSC setting, set TRNGEN bit to 0, change CLKPSC, and set TRNGEN bit to 1 to re-enable the TRNG. (bits: 5-2)
    ,CLKPSC_MASK = 0x0000003C
    ,CLKPSC_POS = 2
    ,CLKPSC_0 = 0x00000000 // 80 ~ 100 MHz
    ,CLKPSC_1 = 0x00000004 // 60 ~ 80 MHz
    ,CLKPSC_2 = 0x00000008 // 50 ~60 MHz
    ,CLKPSC_3 = 0x0000000C // 40 ~50 MHz
    ,CLKPSC_4 = 0x00000010 // 30 ~40 MHz
    ,CLKPSC_5 = 0x00000014 // 25 ~30 MHz
    ,CLKPSC_6 = 0x00000018 // 20 ~25 MHz
    ,CLKPSC_7 = 0x0000001C // 15 ~20 MHz
    ,CLKPSC_8 = 0x00000020 // 12 ~15 MHz
    ,CLKPSC_9 = 0x00000024 // 9 ~12 MHz
    ,CLKPSC_10 = 0x00000028 // 7 ~9 MHz
    ,CLKPSC_11 = 0x0000002C // 6 ~7 MHz
    ,CLKPSC_12 = 0x00000030 // 5 ~6 MHz
    ,CLKPSC_13 = 0x00000034 // 4 ~5 MHz
    ,CLKPSC_15 = 0x0000003C // Reserved.
    // Data Valid Interrupt Enable Bit (bits: 6)
    ,DVIEN_MASK = 0x00000040
    ,DVIEN_POS = 6
    ,DVIEN_0 = 0x00000000 // Interrupt Disabled
    ,DVIEN_1 = 0x00000040 // Interrupt Enabled
    // Random Number Generator Ready (Read Only) After ACT (TRNG_ACT[7]) bit is set, the READY bit become to 1 after a delay of 90us~120us. (bits: 7)
    ,READY_MASK = 0x00000080
    ,READY_POS = 7
    ,READY_0 = 0x00000000 // RNG is not ready or activated
    ,READY_1 = 0x00000080 // RNG is ready to be enabled
    // Reversed (bits: 31-8)
    ,REVERSED_MASK = 0xFFFFFF00
    ,REVERSED_POS = 8
    ,CTL_MASK = 0xFFFFFFFF
    ;
  };
  // TRNG Data Register
  struct DATA : reg<ip_ver, base + 0x4>
  {
    static constexpr typename DATA::type
    // Random Number Generator Data (Read Only) The DATA store the random number is generated by TRNG and can be read only once. (bits: 7-0)
     DATAVAL_MASK = 0x000000FF
    ,DATAVAL_POS = 0
    ,DATA_MASK = 0x000000FF
    ;
  };
  // TRNG Activation Register
  struct ACT : reg<ip_ver, base + 0xC, 0x00000002>
  {
    static constexpr typename ACT::type
    // Random Number Generator Activation After enable the ACT bit, it will active the TRNG module and wait the READY (TRNG_CTL[7]) bit to become 1. Note: ACT is an enable bit of analog part. When TRNG is not required to generate random number, TRNGEN (TRNG_CTL[0]) bit and ACT bit should be set to 0 to reduce power consumption. (bits: 7)
     ACTVAL_MASK = 0x00000080
    ,ACTVAL_POS = 7
    ,ACTVAL_0 = 0x00000000 // TRNG inactive
    ,ACTVAL_1 = 0x00000080 // TRNG active
    ,ACT_MASK = 0x00000080
    ;
  };
}; // struct TRNG

} // namespace lmcu::device::ip::v1

